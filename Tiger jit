; ModuleID = 'Tiger jit'
source_filename = "Tiger jit"

declare void @tig_print_int(i32)

declare void @tig_print(i8*)

declare i32* @tig_init_array(i32, i32)

declare i32* @tig_init_record(i32)

declare i32 @tig_array_length(i8*)

declare i32 @tig_nillable(i8*)

declare void @tig_exit(i32)

declare void @tig_flush()

declare i8* @tig_getchar()

declare i32 @tig_ord(i8*)

declare i8* @tig_chr(i32)

declare i32 @tig_string_cmp(i8*, i8*)

declare i32 @tig_size(i8*)

declare i8* @tig_substring(i8*, i32, i32)

declare i8* @tig_concat(i8*, i8*)

declare i32 @tig_not(i32)

define i32 @main() {
entry:
  %frame_pointer = alloca { i32 }

break_loop:                                       ; No predecessors!
  ret i32 0
}

define i32 @eval_sum({ i32 }*, { i32, i8*, i8* }*) {
entry:
  %if_result_addr = alloca i32
  %root = alloca { i32, i8*, i8* }*
  %frame_pointer = alloca { { i32 }* }
  %arg_address = getelementptr { { i32 }* }, { { i32 }* }* %frame_pointer, i32 0, i32 0
  store { i32 }* %0, { i32 }** %arg_address
  store { i32, i8*, i8* }* %1, { i32, i8*, i8* }** %root
  br label %test

test:                                             ; preds = %entry
  %root1 = load { i32, i8*, i8* }*, { i32, i8*, i8* }** %root
  %2 = bitcast { i32, i8*, i8* }* %root1 to i8*
  %3 = call i32 @tig_nillable(i8* %2)
  %cond = icmp eq i32 %3, 1
  br i1 %cond, label %then, label %else

then:                                             ; preds = %test
  store i32 0, i32* %if_result_addr
  br label %merge

else:                                             ; preds = %test
  %root2 = load { i32, i8*, i8* }*, { i32, i8*, i8* }** %root
  %element = getelementptr { i32, i8*, i8* }, { i32, i8*, i8* }* %root2, i32 0, i32 0
  %field_var = load i32, i32* %element
  %root3 = load { i32, i8*, i8* }*, { i32, i8*, i8* }** %root
  %element4 = getelementptr { i32, i8*, i8* }, { i32, i8*, i8* }* %root3, i32 0, i32 1
  %field_var5 = load i8*, i8** %element4
  %4 = bitcast i8* %field_var5 to { i32, i8*, i8* }*
  %fp_addr_in_sl = getelementptr { { i32 }* }, { { i32 }* }* %frame_pointer, i32 0, i32 0
  %fp_addr = load { i32 }*, { i32 }** %fp_addr_in_sl
  %5 = call i32 @eval_sum({ i32 }* %fp_addr, { i32, i8*, i8* }* %4)
  %add_tmp = add i32 %field_var, %5
  %root6 = load { i32, i8*, i8* }*, { i32, i8*, i8* }** %root
  %element7 = getelementptr { i32, i8*, i8* }, { i32, i8*, i8* }* %root6, i32 0, i32 2
  %field_var8 = load i8*, i8** %element7
  %6 = bitcast i8* %field_var8 to { i32, i8*, i8* }*
  %fp_addr_in_sl9 = getelementptr { { i32 }* }, { { i32 }* }* %frame_pointer, i32 0, i32 0
  %fp_addr10 = load { i32 }*, { i32 }** %fp_addr_in_sl9
  %7 = call i32 @eval_sum({ i32 }* %fp_addr10, { i32, i8*, i8* }* %6)
  %add_tmp11 = add i32 %add_tmp, %7
  store i32 %add_tmp11, i32* %if_result_addr
  br label %merge

merge:                                            ; preds = %else, %then
  %if_result = load i32, i32* %if_result_addr
  ret i32 %if_result
}
