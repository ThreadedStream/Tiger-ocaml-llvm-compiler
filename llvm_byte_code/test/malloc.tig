; ModuleID = 'Tiger jit'
source_filename = "Tiger jit"

declare void @tig_print_int(i32)

declare void @tig_print(i8*)

declare i32* @tig_init_array(i32, i32)

declare i32* @tig_init_record(i32)

declare void @tig_exit(i32)

declare void @tig_flush()

declare i8* @tig_getchar()

declare i32 @tig_ord(i8*)

declare i8* @tig_chr(i32)

declare i32 @tig_size(i8*)

declare i8* @tig_substring(i8*, i32, i32)

declare i8* @tig_concat(i8*, i8*)

declare i32 @tig_not(i32)

define i32 @main() {
entry:
  %b = alloca { i32 }**
  %i = alloca i32
  %a = alloca { i32 }*
  %frame_pointer = alloca { i32, { i32 }** }
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %record_init = bitcast i8* %malloccall to { i32 }*
  %Element = getelementptr { i32 }, { i32 }* %record_init, i32 0, i32 0
  store i32 5, i32* %Element
  store { i32 }* %record_init, { i32 }** %a
  %a1 = load { i32 }*, { i32 }** %a
  %malloccall2 = tail call i8* @malloc(i32 mul (i32 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i32), i32 2))
  %array_init = bitcast i8* %malloccall2 to { i32 }**
  store i32 0, i32* %i
  br label %test

break_loop:                                       ; No predecessors!
  ret i32 0

test:                                             ; preds = %loop, %entry
  %i3 = load i32, i32* %i
  %lt_tmp = icmp slt i32 %i3, 2
  %bool_tmp = zext i1 %lt_tmp to i32
  %cond = icmp eq i32 %bool_tmp, 1
  br i1 %cond, label %loop, label %end

loop:                                             ; preds = %test
  %i4 = load i32, i32* %i
  %Element5 = getelementptr { i32 }*, { i32 }** %array_init, i32 %i4
  store { i32 }* %a1, { i32 }** %Element5
  %add_tmp = add i32 %i4, 1
  store i32 %add_tmp, i32* %i
  br label %test

end:                                              ; preds = %test
  %var_dec = getelementptr { i32, { i32 }** }, { i32, { i32 }** }* %frame_pointer, i32 0, i32 1
  store { i32 }** %array_init, { i32 }*** %var_dec
  %0 = call { i32 }** @add({ i32, { i32 }** }* %frame_pointer)
  store { i32 }** %0, { i32 }*** %b
  %arr = getelementptr { i32, { i32 }** }, { i32, { i32 }** }* %frame_pointer, i32 0, i32 1
  %arr6 = load { i32 }**, { i32 }*** %arr
  %element = getelementptr { i32 }*, { i32 }** %arr6, i32 0
  %lol = load { i32 }*, { i32 }** %element
  %element7 = getelementptr { i32 }, { i32 }* %lol, i32 0, i32 0
  %field_var = load i32, i32* %element7
  call void @tig_print_int(i32 %field_var)
  %b8 = load { i32 }**, { i32 }*** %b
  %element9 = getelementptr { i32 }*, { i32 }** %b8, i32 1
  %lol10 = load { i32 }*, { i32 }** %element9
  %element11 = getelementptr { i32 }, { i32 }* %lol10, i32 0, i32 0
  %field_var12 = load i32, i32* %element11
  call void @tig_print_int(i32 %field_var12)
  ret i32 0
}

declare noalias i8* @malloc(i32)

define { i32 }** @add({ i32, { i32 }** }*) {
entry:
  %another_rec = alloca { i32 }*
  %frame_pointer = alloca { { i32, { i32 }** }* }
  %arg_address = getelementptr { { i32, { i32 }** }* }, { { i32, { i32 }** }* }* %frame_pointer, i32 0, i32 0
  store { i32, { i32 }** }* %0, { i32, { i32 }** }** %arg_address
  %malloccall = tail call i8* @malloc(i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32))
  %record_init = bitcast i8* %malloccall to { i32 }*
  %Element = getelementptr { i32 }, { i32 }* %record_init, i32 0, i32 0
  store i32 6, i32* %Element
  store { i32 }* %record_init, { i32 }** %another_rec
  %fp_addr_in_sl = getelementptr { { i32, { i32 }** }* }, { { i32, { i32 }** }* }* %frame_pointer, i32 0, i32 0
  %fp_addr = load { i32, { i32 }** }*, { i32, { i32 }** }** %fp_addr_in_sl
  %arr = getelementptr { i32, { i32 }** }, { i32, { i32 }** }* %fp_addr, i32 0, i32 1
  %load_left = load { i32 }**, { i32 }*** %arr
  %element_left = getelementptr { i32 }*, { i32 }** %load_left, i32 1
  %another_rec1 = load { i32 }*, { i32 }** %another_rec
  store { i32 }* %another_rec1, { i32 }** %element_left
  %fp_addr_in_sl2 = getelementptr { { i32, { i32 }** }* }, { { i32, { i32 }** }* }* %frame_pointer, i32 0, i32 0
  %fp_addr3 = load { i32, { i32 }** }*, { i32, { i32 }** }** %fp_addr_in_sl2
  %arr4 = getelementptr { i32, { i32 }** }, { i32, { i32 }** }* %fp_addr3, i32 0, i32 1
  %arr5 = load { i32 }**, { i32 }*** %arr4
  ret { i32 }** %arr5
}
